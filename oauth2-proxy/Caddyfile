{$SITE_ADDR} {
  # Requests to /oauth2/* are proxied to oauth2-proxy without authentication.
  # You can't use `reverse_proxy /oauth2/* {$OAUTH_PROXY_HTTP_ADDRESS}` here because the reverse_proxy directive has lower precedence than the handle directive.
  handle /oauth2/* {
    reverse_proxy {$OAUTH_PROXY_HTTP_ADDRESS} {
      # oauth2-proxy requires the X-Real-IP and X-Forwarded-{Proto,Host,Uri} headers.
      # The reverse_proxy directive automatically sets X-Forwarded-{For,Proto,Host} headers.
      header_up X-Real-IP {remote_host}
      header_up X-Forwarded-Uri {uri}
    }
  }

  # Requests to other paths are first processed by oauth2-proxy for authentication.
  handle {
    forward_auth {$OAUTH_PROXY_HTTP_ADDRESS} {
      uri /oauth2/auth

      # oauth2-proxy requires the X-Real-IP and X-Forwarded-{Proto,Host,Uri} headers.
      # The forward_auth directive automatically sets the X-Forwarded-{For,Proto,Host,Method,Uri} headers.
      header_up X-Real-IP {remote_host}

      # If needed, you can copy headers from the oauth2-proxy response to the request sent to the backend
      # Make sure to configure the --set-xauthrequest flag to enable this feature.
      #copy_headers X-Auth-Request-User X-Auth-Request-Email

      # If oauth2-proxy returns a 401 status, redirect the client to the sign-in page.
      @error status 401
      handle_response @error {
        redir * /oauth2/sign_in?rd={scheme}://{host}{uri}
      }
    }

    # If oauth2-proxy returns a 2xx status, the request is then proxied to the backend
    reverse_proxy {$BACKEND_ADDR}
  }
}
